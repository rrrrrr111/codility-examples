/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StartApp.java
 *
 * Created on 22.02.2010, 11:03:14
 */
package ru.roman.samples.threads;

import javax.swing.*;

/**
 * @author churganov_r 29.03.2011
 */
class StartApp extends javax.swing.JFrame {

    /**
     * Creates new form StartApp
     */
    myField fields[];
    myThread threads[];
    int buffer;

    public StartApp() {
        initComponents();

        fields = new myField[]{
                (myField) jTextField1,
                (myField) jTextField2,
                (myField) jTextField3,
                (myField) jTextField4,
                (myField) jTextField5,
                (myField) jTextField8,
                (myField) jTextField7,
                (myField) jTextField10,
                (myField) jTextField9,
                (myField) jTextField6
        };

    }

    public class myField extends JTextField {

        Thread objFlag = null;

        myField() {
            super();
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new myField();
        jTextField2 = new myField();
        jTextField3 = new myField();
        jTextField4 = new myField();
        jTextField5 = new myField();
        jTextField33 = new myField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField6 = new myField();
        jTextField7 = new myField();
        jTextField8 = new myField();
        jTextField9 = new myField();
        jTextField10 = new myField();
        jTextField11 = new myField();
        jLabel1 = new javax.swing.JLabel();
        jTextField12 = new myField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Threads demonstrating application");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jTextField1.setText("0");
        jTextField1.setName("jTextField1"); // NOI18N

        jTextField2.setText("0");
        jTextField2.setName("jTextField2"); // NOI18N

        jTextField3.setText("0");
        jTextField3.setName("jTextField3"); // NOI18N

        jTextField4.setText("0");
        jTextField4.setName("jTextField4"); // NOI18N

        jTextField5.setText("0");
        jTextField5.setName("jTextField5"); // NOI18N

        jTextField33.setText("100");
        jTextField33.setName("jTextField33"); // NOI18N

        jButton1.setText("Add");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Start");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField6.setText("0");
        jTextField6.setName("jTextField6"); // NOI18N

        jTextField7.setText("0");
        jTextField7.setName("jTextField7"); // NOI18N

        jTextField8.setText("0");
        jTextField8.setName("jTextField8"); // NOI18N

        jTextField9.setText("0");
        jTextField9.setName("jTextField9"); // NOI18N

        jTextField10.setText("0");
        jTextField10.setName("jTextField10"); // NOI18N

        jTextField11.setText("0");
        jTextField11.setName("jTextField11"); // NOI18N
        jTextField11.setPreferredSize(new java.awt.Dimension(80, 20));

        jLabel1.setText("Buffer:");
        jLabel1.setName("jLabel1"); // NOI18N

        jTextField12.setText("10");
        jTextField12.setName("jTextField12"); // NOI18N
        jTextField12.setPreferredSize(new java.awt.Dimension(65, 20));

        jButton3.setText("Stop");
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("notify");
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("nitifyAll");
        jButton5.setName("jButton5"); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("wait");
        jButton6.setName("jButton6"); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Disactivate all threads");
        jButton7.setName("jButton7"); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                                        .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                                        .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                                                .addGap(185, 185, 185)
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(119, 119, 119)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jTextField10, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                                        .addComponent(jTextField9, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                                        .addComponent(jTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                                        .addComponent(jTextField7, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                                        .addComponent(jTextField8, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                                                .addGap(24, 24, 24))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(41, 41, 41)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jTextField33, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 537, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(250, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jButton2)
                                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                                        .addComponent(jTextField12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton3)
                                                        .addComponent(jButton5))))
                                .addGap(189, 189, 189))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton4)
                                        .addComponent(jButton5)
                                        .addComponent(jButton6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton2)
                                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton3))
                                .addGap(10, 10, 10)
                                .addComponent(jButton7)
                                .addContainerGap())
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width - dialogSize.width) / 2, (screenSize.height - dialogSize.height) / 2);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        new myThread(-1) {

            @Override
            public void run() {
                bagIndex = (myField) jTextField33;
                String someStr = getText();

                for (int i = 0; i < fields.length / 2; i++) {
                    bagIndex = fields[i];
                    getSetText(Integer.parseInt(someStr));
                }

            }
        }.start();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed


        new myThread(-1) {

            @Override
            public void run() {
                bagIndex = (myField) jTextField12;
                String someString = getText();

                if (!someString.equals("")) {
                    int someInt = Integer.parseInt(getText());
                    if (threads == null) {
                        threads = new myThread[someInt];
                    }

                    for (int i = 0; i < threads.length; i++) {
                        if (threads[i] == null) {
                            threads[i] = new myThread(i);
                        }

                        if (threads[i].isAlive()) {
                            threads[i].interraptflag = 0;
                        } else {
                            threads[i].start();
                        }
                    }
                }
            }
        }.start();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        new myThread(-1) {

            @Override
            public void run() {

                bagIndex = (myField) jTextField12;
                String someString = getText();

                if (!someString.equals("")) {
                    int someInt = Integer.parseInt(someString);
                    threads[someInt].interraptflag = 1;

                } else {
                    for (int i = 0; i < threads.length; i++) {
                        threads[i].interraptflag = 1;
                    }
                }
            }
        }.start();


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        new myThread(-1) {

            @Override
            public void run() {

                bagIndex = (myField) jTextField12;
                String someString = getText();

                if (!someString.equals("")) {
                    int someInt = Integer.parseInt(getText());
                    threads[someInt].interraptflag = 2;

                } else {
                    for (int i = 0; i < threads.length; i++) {
                        threads[i].interraptflag = 2;
                    }
                }
            }
        }.start();

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        synchronized (StartApp.this) {
            this.notify();
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        synchronized (StartApp.this) {
            this.notifyAll();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        for (int i = 0; i < threads.length; i++) {
            threads[i].interraptflag = 3;
        }
        threads = null;
    }//GEN-LAST:event_jButton7ActionPerformed

    public class myThread extends Thread {

        myThread(int threadNumber) {
            super();
            this.threadNumber = threadNumber;
        }

        private int threadNumber;
        int interraptflag = 0;
        myField bagIndex;
        String bagText;

        @Override
        public void run() {
            try {
                while (true) {

                    if (interraptflag == 0) {
                        // Получаем количесво в первоначальном контейнере
                        String someStr = "";
                        while (someStr.equals("")) {
                            bagIndex = fields[threadNumber % 5];
                            someStr = getText();
                        }
                        int someInt = Integer.parseInt(someStr);

                        if (someInt > 0) {
                            // Уменьшаем на еденицу количесво в первоначальном буфере
                            bagIndex = fields[threadNumber % 5];
                            getSetText(-1);

                            synchronized (StartApp.this) {
                                // кладем в буфер
                                buffer += 1;
                            }

                            setText(jTextField11, String.valueOf(buffer));
                            sleep(10);
                            // Получаем количесво в конeчном контейнере

                            bagIndex = fields[threadNumber % 5 + 5];
                            getSetText(1);

                            synchronized (StartApp.this) {
                                // вынимаем из буфера
                                buffer -= 1;
                            }
                            setText(jTextField11, String.valueOf(buffer));
                        }
                    } else if (interraptflag == 2) {
                        synchronized (StartApp.this) {
                            StartApp.this.wait();
                            interraptflag = 0;
                        }
                    } else if (interraptflag == 3) {
                        break;
                    }
                    sleep(10);
                }

            } catch (InterruptedException e) {
                e.printStackTrace();

            }
        }
    }

    /**
     * @param args the command line arguments
     */
    //Thread flag;
    //final Object monObj = new Object();
    void setText() {
        try {
            while (((myThread) Thread.currentThread()).bagIndex.objFlag != Thread.currentThread()) {
                synchronized (((myThread) Thread.currentThread()).bagIndex) {
                    if (((myThread) Thread.currentThread()).bagIndex.objFlag == null) {
                        ((myThread) Thread.currentThread()).bagIndex.objFlag = Thread.currentThread();
                        //System.out.println(Thread.currentThread().getName() + " my");
                    }
                }
                Thread.sleep(10);
            }
            //System.out.println(Thread.currentThread().getName() + " set");
            ((myThread) Thread.currentThread()).bagIndex.setText(((myThread) Thread.currentThread()).bagText);

            //while (((myThread) Thread.currentThread()).bagIndex.getText() != ((myThread) Thread.currentThread()).bagText){
            //     Thread.sleep(10);
            //System.out.println(Thread.currentThread().getName());
            //}
            //System.out.println(Thread.currentThread().getName() + " null");
            ((myThread) Thread.currentThread()).bagIndex.objFlag = null;

        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    void setText(JTextField field, String text) {
        try {
            while (((myThread) Thread.currentThread()).bagIndex.objFlag != Thread.currentThread()) {
                synchronized (((myThread) Thread.currentThread()).bagIndex) {
                    if (((myThread) Thread.currentThread()).bagIndex.objFlag == null) {
                        ((myThread) Thread.currentThread()).bagIndex.objFlag = Thread.currentThread();
                    }
                }
                Thread.sleep(1);
            }
            field.setText(text);
            ((myThread) Thread.currentThread()).bagIndex.objFlag = null;

        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    String getText(JTextField field) {
        String someStr;
        try {
            // Если строку заноса данных в визуальный компонент занести в блок  synchronized , то диалоговое приложение не сможет нормально работать
            // поэтому делаем отдельный цикл для того чтобы потоки обращались к элемнту интерфейса по очереди
            while (((myThread) Thread.currentThread()).bagIndex.objFlag != Thread.currentThread()) {
                synchronized (((myThread) Thread.currentThread()).bagIndex) {
                    if (((myThread) Thread.currentThread()).bagIndex.objFlag == null) {
                        ((myThread) Thread.currentThread()).bagIndex.objFlag = Thread.currentThread();
                    }
                }
                Thread.sleep(1);
            }
            someStr = field.getText();
            ((myThread) Thread.currentThread()).bagIndex.objFlag = null;
            return someStr;

        } catch (InterruptedException e) {
            e.printStackTrace();
            return "";
        }

    }

    String getText() {
        String someStr;
        try {
            // Если строку заноса данных в визуальный компонент занести в блок  synchronized , то диалоговое приложение не сможет нормально работать
            // поэтому делаем отдельный цикл для того чтобы потоки обращались к элемнту интерфейса по очереди
            while (((myThread) Thread.currentThread()).bagIndex.objFlag != Thread.currentThread()) {
                synchronized (((myThread) Thread.currentThread()).bagIndex) {
                    if (((myThread) Thread.currentThread()).bagIndex.objFlag == null) {
                        ((myThread) Thread.currentThread()).bagIndex.objFlag = Thread.currentThread();
                    }
                }
                Thread.sleep(1);
            }
            someStr = ((myThread) Thread.currentThread()).bagIndex.getText();
            ((myThread) Thread.currentThread()).bagIndex.objFlag = null;
            return someStr;

        } catch (InterruptedException e) {
            e.printStackTrace();
            return "";
        }

    }

    void getSetText(int add) {
        try {
            while (((myThread) Thread.currentThread()).bagIndex.objFlag != Thread.currentThread()) {
                synchronized (((myThread) Thread.currentThread()).bagIndex) {
                    if (((myThread) Thread.currentThread()).bagIndex.objFlag == null) {
                        ((myThread) Thread.currentThread()).bagIndex.objFlag = Thread.currentThread();
                    } else {
                        ((myThread) Thread.currentThread()).bagIndex.wait();
                    }
                }
                Thread.sleep(1);
            }

            JTextField someField = ((myThread) Thread.currentThread()).bagIndex;
            String someStr = someField.getText();
            int someInt;
            someInt = Integer.parseInt(someStr) + add;
            someStr = String.valueOf(someInt);
            someField.setText(someStr);
            synchronized (((myThread) Thread.currentThread()).bagIndex) {
                ((myThread) Thread.currentThread()).bagIndex.objFlag = null;
                ((myThread) Thread.currentThread()).bagIndex.notifyAll();
            }


        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new StartApp().setVisible(true);
            }
        });


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton jButton1;
    javax.swing.JButton jButton2;
    javax.swing.JButton jButton3;
    javax.swing.JButton jButton4;
    javax.swing.JButton jButton5;
    javax.swing.JButton jButton6;
    javax.swing.JButton jButton7;
    javax.swing.JLabel jLabel1;
    javax.swing.JTextField jTextField1;
    javax.swing.JTextField jTextField10;
    javax.swing.JTextField jTextField11;
    javax.swing.JTextField jTextField12;
    javax.swing.JTextField jTextField2;
    javax.swing.JTextField jTextField3;
    javax.swing.JTextField jTextField33;
    javax.swing.JTextField jTextField4;
    javax.swing.JTextField jTextField5;
    javax.swing.JTextField jTextField6;
    javax.swing.JTextField jTextField7;
    javax.swing.JTextField jTextField8;
    javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
